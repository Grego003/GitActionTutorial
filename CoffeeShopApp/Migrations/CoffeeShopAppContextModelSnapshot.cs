// <auto-generated />
using System;
using CoffeeShopApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApp.Migrations
{
    [DbContext(typeof(CoffeeShopAppContext))]
    partial class CoffeeShopAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoffeeShopApp.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApp.Models.Products", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoldOut")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("TotalSold")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "15f7354f-e12b-4569-9dac-3a8e7bf12a83",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 1, 3, 24, 16, 960, DateTimeKind.Local).AddTicks(7779),
                            Description = "Strong and flavorful espresso shot",
                            IsDeleted = false,
                            IsDraft = false,
                            IsSoldOut = false,
                            Name = "Espresso",
                            Price = 2.99m,
                            ProductType = 0,
                            Stock = 50,
                            TotalSold = 100,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = "d0af4012-91a4-47af-8030-84f1457e79bf",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 1, 3, 24, 16, 960, DateTimeKind.Local).AddTicks(7816),
                            Description = "Smooth and creamy latte with steamed milk",
                            IsDeleted = false,
                            IsDraft = false,
                            IsSoldOut = false,
                            Name = "Latte",
                            Price = 3.99m,
                            ProductType = 0,
                            Stock = 40,
                            TotalSold = 90,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = "66be0787-9066-4e8f-993c-192511b81b9f",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 1, 3, 24, 16, 960, DateTimeKind.Local).AddTicks(7846),
                            Description = "Traditional Italian espresso drink with frothy milk",
                            IsDeleted = false,
                            IsDraft = false,
                            IsSoldOut = false,
                            Name = "Cappuccino",
                            Price = 3.49m,
                            ProductType = 0,
                            Stock = 30,
                            TotalSold = 80,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = "d3fd0e83-8020-4a06-947a-b8327fbc8209",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 1, 3, 24, 16, 960, DateTimeKind.Local).AddTicks(7855),
                            Description = "Rich and indulgent chocolate-flavored espresso drink",
                            IsDeleted = false,
                            IsDraft = false,
                            IsSoldOut = false,
                            Name = "Mocha",
                            Price = 4.49m,
                            ProductType = 0,
                            Stock = 35,
                            TotalSold = 70,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = "6a38b9c2-a92b-4c01-a985-84926478e640",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 1, 3, 24, 16, 960, DateTimeKind.Local).AddTicks(7862),
                            Description = "A shot of espresso with hot water",
                            IsDeleted = false,
                            IsDraft = false,
                            IsSoldOut = false,
                            Name = "Americano",
                            Price = 3.29m,
                            ProductType = 0,
                            Stock = 45,
                            TotalSold = 110,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = "2e540eab-d664-4325-bbc6-4154d6501842",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 1, 3, 24, 16, 960, DateTimeKind.Local).AddTicks(7954),
                            Description = "Espresso with a dollop of frothy milk",
                            IsDeleted = false,
                            IsDraft = false,
                            IsSoldOut = false,
                            Name = "Macchiato",
                            Price = 3.79m,
                            ProductType = 0,
                            Stock = 25,
                            TotalSold = 60,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = "46823f9c-ac61-4e4f-9941-2583e50790ab",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 1, 3, 24, 16, 960, DateTimeKind.Local).AddTicks(7963),
                            Description = "Espresso with vanilla syrup, steamed milk, and caramel drizzle",
                            IsDeleted = false,
                            IsDraft = false,
                            IsSoldOut = false,
                            Name = "Caramel Macchiato",
                            Price = 4.99m,
                            ProductType = 0,
                            Stock = 20,
                            TotalSold = 50,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = "f447bb5c-a8ac-4cfa-88bc-12f01999c5fb",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 1, 3, 24, 16, 960, DateTimeKind.Local).AddTicks(7970),
                            Description = "Chilled coffee served over ice",
                            IsDeleted = false,
                            IsDraft = false,
                            IsSoldOut = false,
                            Name = "Iced Coffee",
                            Price = 3.49m,
                            ProductType = 0,
                            Stock = 60,
                            TotalSold = 120,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = "49394773-cac9-4210-95f6-1726423ae212",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 1, 3, 24, 16, 960, DateTimeKind.Local).AddTicks(7976),
                            Description = "Refreshing green tea",
                            IsDeleted = false,
                            IsDraft = false,
                            IsSoldOut = false,
                            Name = "Green Tea",
                            Price = 2.49m,
                            ProductType = 1,
                            Stock = 30,
                            TotalSold = 70,
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = "586c8289-0730-4a78-8099-4c22ccc4e582",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 1, 3, 24, 16, 960, DateTimeKind.Local).AddTicks(7983),
                            Description = "Rich and creamy hot chocolate",
                            IsDeleted = false,
                            IsDraft = false,
                            IsSoldOut = false,
                            Name = "Hot Chocolate",
                            Price = 3.99m,
                            ProductType = 1,
                            Stock = 25,
                            TotalSold = 60,
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "766d4aaf-ae4d-4731-8000-25f66737ae36",
                            Name = "client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "96d2e2ee-fa67-4e3d-ba94-4d69b2c91f7d",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoffeeShopApp.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoffeeShopApp.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApp.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoffeeShopApp.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
